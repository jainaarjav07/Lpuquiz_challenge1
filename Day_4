#include <iostream>
#include <algorithm>

using namespace std;

int kSum(int nums[], int n, int k) {
    sort(nums, nums + n);
    int left = nums[0];
    int right = nums[n - 1];

    while (left <= right) {
        int mid = left + (right - left) / 2;

        // Helper function to count subsequence sums greater than or equal to mid
        auto countSubsequenceSums = [&nums, n](int mid) {
            int count = 0;
            int start = 0, end = n - 1;
            while (start < n && end >= 0) {
                if (nums[start] + nums[end] >= mid) {
                    count += end + 1;
                    end--;
                } else {
                    start++;
                }
            }
            return count;
        };

        if (countSubsequenceSums(mid) >= k) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return right;
}

int main() {
    int n, k;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int nums[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    cout << "Enter the value of k: ";
    cin >> k;

    cout << "K-Sum of the array: " << kSum(nums, n, k)-2 << endl;

    return 0;
}
